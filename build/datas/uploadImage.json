[
  "## JavaScript 上传图片带预览，React版本",
  "网上有一些例子是上传到server之后，预览。但是觉得有些麻烦。js是支持预览，以及图片格式，大小判断的。本地预览的话，减少了网络请求。同时服务端更轻量。主要代码如下。通过H5的FileReader来读取input上传的文件。FileReader通多流读取，给它绑定回调。将读取后的Base64字符串当作Image的src.然后将Image加入到Dom中，即可完成预览。同时，如果Image的大小，格式符合要求，将它上传到服务器。为了简单，我用的ajaxFileUpload.",
  "> Tip:为了使用第三方样式，可以将原生的input 元素隐藏，然后在另一个元素的点击时。唤起input的点击事件。算是个常用的小技巧吧。",
  "",
  "```\timgSel(e){\n\t\tvar img = new Image();//构造JS的Image对象 \n\t\tlet self = this;\n\t\timg.onload =()=>{\n\t\t\tif(img.height != 360 || img.width != 640){\n\t\t\t\tmessage.error('请上传640*360的图片');\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\t$(img).css('height',64);\n\t\t\t\t$(ReactDom.findDOMNode(this.refs.preview)).html('').append(img);\n\t\t\t\t$.ajaxFileUpload(\n\t\t            {\n\t\t                url: '/brand/bigbrandCate/uploadImage',\n\t\t                secureuri: false, //是否需要安全协议，一般设置为false\n\t\t                fileElementId: 'img', //文件上传域的ID\n\t\t                dataType: 'json', //返回值类型 一般设置为json\n\t\t                success: function (res, status){  //服务器成功响应处理函数\n\t\t                \tif(res.status == 0){\n\t\t                \t\tmessage.success(res.msg);\n\t\t                \t\tself.setState({dataUrl:res.data});\n\t\t                \t}else{\n\t\t                \t\tmessage.error('上传失败');\n\t\t                \t}\n\t\t                },\n\t\t                error: function (data, status, e)//服务器响应失败处理函数\n\t\t                {\n\t\t                    message.error('status');\n\t\t                }\n\t\t            }\n\t\t        );\n\t\t\t}\n\t\t};\n\t\tvar reader = new FileReader();\n    \treader.onload = (evt)=> {img.src = evt.target.result;};\n        //console.log(e.target.files[0].size);\n    \treader.readAsDataURL(e.target.files[0]);\t\n\t}\n```",
  "更新：",
  "在上面的上传中，需要使用jquery的`ajaxFileUpload`库。后来发现浏览器内置的`FormData`对象也能做同样的事情，并且不需要依赖第三方库。代码如下，通过构建一个form对象，将图片`append`到form中。然后`post`到服务器即可。",
  "```\timgSel(e){\n\t\tvar img = new Image();//构造JS的Image对象 \n\t\tlet self = this;\n\t\timg.onload =()=>{\n\t\t\tif(img.height != 360 || img.width != 640){\n\t\t\t\tmessage.error('请上传640*360的图片');\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\t$(img).css('height',64);\n\t\t\t\t$(ReactDom.findDOMNode(this.refs.preview)).html('').append(img);\n\n\t\t\t\tvar form = new FormData();\n\t\t\t\tform.append('image',$('#img'+this.props.id)[0].files[0]);\n\t\t\t\t$.ajax({\n\t\t\t\t  url: '/brand/bigbrandCate/uploadImage',\n\t\t\t\t  type: 'POST',\n\t\t\t\t  data: form,\n\t\t\t\t  processData: false,  // 告诉jQuery不要去处理发送的数据\n\t\t\t\t  contentType: false,   // 告诉jQuery不要去设置Content-Type请求头\n\t\t\t\t  success:(res)=>{\n\t\t\t\t\tif(res.status == 0){\n                \t\tmessage.success(res.msg);\n                \t\tself.setState({dataUrl:res.data});\n                \t}else{\n                \t\tmessage.error('上传失败');\n                \t}\n\t\t\t\t  }\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tvar reader = new FileReader();\n    \treader.onload = (evt)=> {img.src = evt.target.result;};\n        //console.log(e.target.files[0].size);\n    \treader.readAsDataURL(e.target.files[0]);\t\n\t}\n```",
  "React 的 `Render()` 的部分代码",
  "```<FormItem\n      label=\"背景图：\"\n      labelCol={{span: 8}}\n      wrapperCol={{span: 16}}\n      required>\n      <input type=\"file\" id=\"img\" name=\"image\" accept=\"image/*\" ref=\"upload\" style={{width:0,height:0}} onChange={this.imgSel.bind(this)}/>\n      <Button type=\"ghost\" onClick={this.uploadClick.bind(this)}>\n          <Icon type=\"upload\"  /> 点击上传\n      </Button>\n    </FormItem>\n    <FormItem label=\"预览：\" labelCol={{span: 8}} wrapperCol={{span: 16}}>\n     <span ref=\"preview\"></span>\n</FormItem>\n```"
]