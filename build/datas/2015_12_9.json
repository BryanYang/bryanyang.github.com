[
  "# 第一篇博客",
  "## 关于这篇博客的诞生",
  "-------",
  "2015年12月，才接触到React, 其实老早以前就看到相关的帖子，自己也曾去过React的首页去看官方文档。当时关于js 写 native APP 的帖子我都会点进去瞅瞅，React Native也是当时看到的，觉得很了不起，但是仔细想了之后，又发现存在一个问题，如果像我这样对Android一无所知的前端程序员，即使真的用官方Demo 运行起了 Android程序，如果程序异常，如何排查？哪怕最简单的错误。如果是对Android有过了解，写过原生App的程序来讲，同时兼具JS的功底，那么React应该确实是个不错的选择，毕竟人家脸谱网的程序都是全栈工程师。身兼多种学问。。",
  "",
  "后来项目说是要用React JS。没办法，只好看看，跟很多新人一样吧，带着Angular的经验去看React. 都会皱起眉头，这TM啥玩意儿啊。`JSX`?! ,什么鬼又是？为啥简单的前端现在变得好复杂？？",
  "",
  "俗话说，**将欲摧之，必先附之** 先学学它，再诋毁它~~~",
  "",
  "## 那么what's React?",
  "",
  "* React 是用来渲染View的。跟angular没有可比性，二者是不同的东西。不同职责。",
  "* 渲染View,没啥大不了，但是 React 通过 一个 内存Dom 来渲染，渲染前，先diff. 最小化渲染量",
  "* 将html与js组合在一起，整个组件更具封闭性。All is component! 整个页面就是不同组件组合在一起",
  "",
  "## 用 React 来生成博客",
  "",
  "熟悉用md写`文档` ，似乎同样可以用它来写`博客`。我们需要就是将原始的md文档转换成html。`md` 文档可以被解析为一行行特殊标签开始的文本。根据不同标签 render 文本成了 React 的工作。我们只需要写好 render 的逻辑即可。比如，`#`是 `<h1>` 标签。那么在 React 中就是：",
  "```render:function(){ \n\treturn (&lt;h1&gt;{文本}&lt;/h1&gt;)\n\t}\n```",
  "对于特殊的字符，比如 `code`, 通过正则匹配然后替换成`&lt;code&gt;文本&lt;/code&gt;`",
  "",
  "目前样式用 bootstrap。",
  "",
  "---------------------",
  "### 2016年春节前更新：",
  "之前博客的设计，是每一篇文章一个html与对应的数据js。这样设计好处是可以单独自定义某个博客的内容以及样式。但是有利同时也有弊，如果页面中有某个公共的元素，比如文章列表。那么每次都要重新编译一次所有的文章来更新文章列表（因为我们是静态blog,所以无法动态后台加载数据，数据都是通过编译塞到页面或者js中）。花了1天时间改成了单页面应用。博客的title,以及两侧列表内容作为页面的主体。中间内容则通过动态加载文章js来渲染。大体页面结构如下：",
  "```<div className=\"container mt50\">\n        <header className=\"header header--fixed hide-from-print animated\">\n          <div className=\"container\">\n            <nav className=\"nav-wrapper\">\n            </nav>\n            <a href=\"#\" className=\"brand header__link\">\n              <b className=\"brand__forename\">Bryan Yang</b><b className=\"brand__surname\">'s blog</b>\n            </a>\n          </div>\n        </header>\n            <div className=\"row\">\n                <div className=\"col-xs-12 col-md-9 main \">\n                    <Article lines={this.state.articleLines}  />\n                </div>\n                <div className=\"col-xs-12 col-md-3 side\">\n                  <Author/>\n                  <ArticleList dataSource={this.state.articleList} toArticle={this.fetchArticle.bind(this)}/>\n                </div>\n                  \n            </div>\n        </div>\n```",
  "如此，更加具有灵活性。整个博客成了一个页面，与n 多数据json。当点击文章列表。则加载相应的data.动态更新Article。",
  "-------",
  "### 用了2个多月的React. 略有一些感触，或许理解并不全面。",
  "目前在做的后台系统，是一个轻UI重交互的系统。页面form表单先对比较复杂。光一个页面的ajax接口就有10来个之多。繁多的数据验证，以及用户操作数据的暂时存储。用react 写了页面的一些控件，发现并不省代码。因为react是单向数据绑定。所以有一些 组件中的 handleChange有些多而且冗余。相比AngularJS 这是个劣势。另外在编写组件时候所费得脑力也较多，需要考虑state,props等要素。后来作的一个页面试着用vue去做。顿时感觉省时省力。",
  "如果现在让我选择技术方案。对于我们的这种后台重交互的系统，如果是单选的话，Angular（vue）是首选。如果可以多种叠加使用，那么Angular+react更好。对于整个页面，用Ng绑定data。页面中用到的公共组件。比如级联菜单，时间选择器等复用性高的插件。则考虑用react实现。以提高复用性。",
  "",
  "------",
  "本文md文件",
  "```# 第一篇博客\n## 关于这篇博客的诞生\n-------\n2015年12月，才接触到React, 其实老早以前就看到相关的帖子，自己也曾去过React的首页去看官方文档。当时关于js 写 native APP 的帖子我都会点进去瞅瞅，React Native也是当时看到的，觉得很了不起，但是仔细想了之后，又发现存在一个问题，如果像我这样对Android一无所知的前端程序员，即使真的用官方Demo 运行起了 Android程序，如果程序异常，如何排查？哪怕最简单的错误。如果是对Android有过了解，写过原生App的程序来讲，同时兼具JS的功底，那么React应该确实是个不错的选择，毕竟人家脸谱网的程序都是全栈工程师。身兼多种学问。。\n\n后来项目说是要用React JS。没办法，只好看看，跟很多新人一样吧，带着Angular的经验去看React. 都会皱起眉头，这TM啥玩意儿啊。`JSX`?! ,什么鬼又是？为啥简单的前端现在变得好复杂？？\n\n俗话说，**将欲摧之，必先附之** 先学学它，再诋毁它~~~\n\n## 那么what's React?\n\n* React 是用来渲染View的。跟angular没有可比性，二者是不同的东西。不同职责。\n* 渲染View,没啥大不了，但是 React 通过 一个 内存Dom 来渲染，渲染前，先diff. 最小化渲染量\n* 将html与js组合在一起，整个组件更具封闭性。All is component! 整个页面就是不同组件组合在一起\n\n## 用 React 来生成博客\n\n熟悉用md写`文档` ，似乎同样可以用它来写`博客`。我们需要就是将原始的md文档转换成html。`md` 文档可以被解析为一行行特殊标签开始的文本。根据不同标签 render 文本成了 React 的工作。我们只需要写好 render 的逻辑即可。比如，`#`是 `<h1>` 标签。那么在 React 中就是：\n ```\nrender:function(){ \n  return (&lt;h1&gt;{文本}&lt;/h1&gt;)\n  }\n ```\n对于特殊的字符，比如 `code`, 通过正则匹配然后替换成`&lt;code&gt;文本&lt;/code&gt;`\n\n目前样式用 bootstrap。\n\n---------------------\n### 2016年春节前更新：\n之前博客的设计，是每一篇文章一个html与对应的数据js。这样设计好处是可以单独自定义某个博客的内容以及样式。但是有利同时也有弊，如果页面中有某个公共的元素，比如文章列表。那么每次都要重新编译一次所有的文章来更新文章列表（因为我们是静态blog,所以无法动态后台加载数据，数据都是通过编译塞到页面或者js中）。花了1天时间改成了单页面应用。博客的title,以及两侧列表内容作为页面的主体。中间内容则通过动态加载文章js来渲染。大体页面结构如下：\n ```\n<div className=\"container mt50\">\n        <header className=\"header header--fixed hide-from-print animated\">\n          <div className=\"container\">\n            <nav className=\"nav-wrapper\">\n            </nav>\n            <a href=\"#\" className=\"brand header__link\">\n              <b className=\"brand__forename\">Bryan Yang</b><b className=\"brand__surname\">'s blog</b>\n            </a>\n          </div>\n        </header>\n            <div className=\"row\">\n                <div className=\"col-xs-12 col-md-9 main \">\n                    <Article lines={this.state.articleLines}  />\n                </div>\n                <div className=\"col-xs-12 col-md-3 side\">\n                  <Author/>\n                  <ArticleList dataSource={this.state.articleList} toArticle={this.fetchArticle.bind(this)}/>\n                </div>\n                  \n            </div>\n        </div>\n ```\n如此，更加具有灵活性。整个博客成了一个页面，与n 多数据json。当点击文章列表。则加载相应的data.动态更新Article。\n-------\n### 用了2个多月的React. 略有一些感触，或许理解并不全面。\n目前在做的后台系统，是一个轻UI重交互的系统。页面form表单先对比较复杂。光一个页面的ajax接口就有10来个之多。繁多的数据验证，以及用户操作数据的暂时存储。用react 写了页面的一些控件，发现并不省代码。因为react是单向数据绑定。所以有一些 组件中的 handleChange有些多而且冗余。相比AngularJS 这是个劣势。另外在编写组件时候所费得脑力也较多，需要考虑state,props等要素。后来作的一个页面试着用vue去做。顿时感觉省时省力。\n如果现在让我选择技术方案。对于我们的这种后台重交互的系统，如果是单选的话，Angular（vue）是首选。如果可以多种叠加使用，那么Angular+react更好。对于整个页面，用Ng绑定data。页面中用到的公共组件。比如级联菜单，时间选择器等复用性高的插件。则考虑用react实现。以提高复用性。\n```",
  "----------",
  "**app.jsx**文件，渲染网页全靠它了:",
  "```import React ,{Component}from 'react';\nrequire('whatwg-fetch/fetch');\nrequire('./ui.less');\n\nclass Line extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      windowWidth:window.innerWidth,\n    };\n  }\n\n  componentDidMount() {\n    //如果放开，在拖动窗口变化的时候一直刷新渲染。可能并没有真的重新绘制整个文章。但是总归是触发render计算了。不好。\n    //window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  handleResize(e){\n    this.setState({windowWidth: window.innerWidth});\n  }\n\n  render(){\n\n        var l = this.props.line;\n        l = l.replace(/\\t/g,'    ');\n        //代码块中不替换，引用中也不替换（引用会进行第二次渲染，避免多渲染导致bug）。\n        if(!/```([\\s\\S]+?)```/.test(l) && !/^>\\s([\\s\\S]*)/m.test(l)){\n            l = l.replace(/\\*\\*(.+?)\\*\\*/g,'<strong>$1</strong>');\n            l = l.replace(/\\*(.+?)\\*/g,'<em>$1</em>');\n            l = l.replace(/__(.+?)__/g,'<kbd>$1</kbd>');\n            l = l.replace(/!\\[.+?\\]\\((.+?)\\)/g,'<img src=\"$1\" class=\"img-thumbnail\" style=\"margin-right:50px;\"/>');\n            l = l.replace(/\\[(.+?)\\]\\((.+?)\\)/g,'<a href=\"$2\">$1</a>');\n            \n            // 将文档中<code>xxx</code> 替换成 &lt;code/&gt;xxx&lt;/code&gt;\n            l = l.replace(/<code>(.*?)<\\/code>/g,function(p,m){\n              return p.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n            });\n     \n            // `xx` 替换成 <code>xx</code>\n            l = l.replace(/`(.+?)`/g,'<code>$1</code>');\n         \n            // 将文档中<code><p></p></code> 替换成 <code>&lt;p&gt;&lt;/&gt;></code>\n            l = l.replace(/<code>(.*?)<\\/code>/g,function(p,m){\n              return `<code>${m.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</code>`;\n            });\n            \n        }\n\n        if(/^#\\s(.*)/.test(l)){\n          return (\n            <h1 className=\"page-header\" dangerouslySetInnerHTML={{__html: RegExp.$1}}></h1>\n            )\n        }else if(/^##\\s(.*)/.test(l)){\n          return (<h2 dangerouslySetInnerHTML={{__html: RegExp.$1}}></h2>)\n        }\n        else if(/^###\\s(.*)/.test(l)){\n          return (<h3 dangerouslySetInnerHTML={{__html: RegExp.$1}}></h3>)\n        }else if(/^----/.test(l)){\n          return(<hr/>)\n        }else if(/^>\\s([\\s\\S]*)/m.test(l)){\n          let html = RegExp.$1.split('\\n').map(function(line){\n            return (<Line line={line} />)\n          });\n\n          return(<blockquote >{html}</blockquote>)\n        }else if(/^\\*\\s(.*)/.test(l)){\n            return(<li dangerouslySetInnerHTML={{__html: RegExp.$1}}></li>)\n        }else if(/^```([\\s\\S]+?)```$/.test(l)){\n          return (<pre className=\"prettyprint linenums Lang-js\" dangerouslySetInnerHTML={{__html:RegExp.$1.replace(/</g,'&lt;').replace(/>/g,'&gt;')}}></pre>);\n        }\n        else if(/^``([\\s\\S]+?)``$/.test(l)){\n          return (<pre dangerouslySetInnerHTML={{__html:RegExp.$1.replace(/</g,'&lt;').replace(/>/g,'&gt;')}}></pre>);\n        }\n        else if(/^\\|\\s(.*)/.test(l)){\n            if(this.state.windowWidth>600){\n              return(<table className=\"table table-bordered\" dangerouslySetInnerHTML={{__html: RegExp.$1}}></table>)\n            }else{\n              var h = RegExp.$1.replace(/<tr>/g,'<div class=\"row\">').replace(/<\\/tr>/g,'</div>').replace(/<td>/g,'<div class=\"col-xs-6\">').replace(/<\\/td>/g,'</div>');\n              return(<div dangerouslySetInnerHTML={{__html: h}}></div>)\n            }\n          \n        }\n        else if(l == ''){\n          return (<br/>)\n        }\n        else return(\n          <div className=\"bs-docs-section\" dangerouslySetInnerHTML={{__html:'<p>' +l+'<p>'}}>\n          </div>);\n  }\n\n}\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      articleLines : [],\n      articleList : [],\n    }\n  }\n\n  componentDidMount(){\n    this.fetchArticleList();\n    let myElement = document.querySelector('header');\n    let headroom  = new Headroom(myElement,{\n        tolerance: 5,\n        offset: 205,\n        classes: {\n          initial: 'animated',\n          pinned: 'slideInDown',\n          unpinned: 'slideOutUp'\n        }\n    });\n    headroom.init();\n    prettyPrint();\n\n    window.onhashchange = ()=>{\n      let hash = window.location.hash.substr(1);\n      if(hash != ''){\n        this.fetchArticle(`build/datas/${hash}.json`);\n      }\n    };\n    window.onhashchange();\n  }\n\n  componentDidUpdate(){\n    if(window.prettyPrint){\n      prettyPrint();\n    }\n\n    $('.post-nav').pin({padding: {top: 10, bottom: 10}});\n  }\n\n  fetchArticle(link){\n    fetch(link)\n    .then(response => response.json())\n    .then((json) => {\n      let array = link.split('/');\n      let name = array[array.length-1].split('.')[0];\n      window.location.hash = name;\n      this.setState({articleLines:json})\n    })\n  }\n\n  fetchArticleList(){\n    fetch('build/datas/articles.json')\n    .then(function (response) {return response.json();})\n    .then(json => this.setState({articleList:json}));\n  }\n\n  render(){\n    return(\n      <div className=\"container mt50\">\n        <header className=\"header header--fixed hide-from-print animated\">\n          <div className=\"container\">\n            <nav className=\"nav-wrapper\">\n            </nav>\n            <a href=\"#\" className=\"brand header__link\">\n              <b className=\"brand__forename\">Bryan Yang</b><b className=\"brand__surname\">'s blog</b>\n            </a>\n          </div>\n        </header>\n            <div className=\"row\">\n                <div className=\"col-xs-12 col-md-9 main \">\n                    <Article lines={this.state.articleLines}  />\n                </div>\n                <div className=\"col-xs-12 col-md-3 side\">\n                  <Author/>\n                  <ArticleList dataSource={this.state.articleList} toArticle={this.fetchArticle.bind(this)}/>\n                </div>\n                  \n            </div>\n        </div>\n      )\n  }\n}\n\n\nclass Article extends Component{\n  constructor(props){\n   super(props);\n  }\n\n  render(){\n        let lines = this.props.lines;\n        let html = lines.map(function(line){\n            return (<Line line={line} />)\n        });\n        return (\n          <div className=\"\">\n          {html}\n          </div>);\n  }\n}\n\n\n\nclass Author extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return(\n        <div className=\"widget-box no-border\">\n          <p className=\"text-muted\">本文标签</p>\n          <h4 className=\"fz16\"><a href=\"/blog/haiping\">web前端</a></h4>\n          <p className=\"wordbreak\">记录前端开发过程的思考，分享开发经验！</p>\n          <div className=\"article__widget--author\">\n              <a href=\"/u/haiping\">\n                  <img className=\"avatar-40\" src=\"https://avatars0.githubusercontent.com/u/3216761?v=3&s=460\" alt=\"haiping\"/>\n                  <span>Bryan Yang</span>\n              </a>\n              <span className=\"text-muted\">作者</span>\n          </div>\n        </div>\n\n      )\n  }\n}\n\nclass ArticleList extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  componentDidMount(){\n    $('.post-nav').pin();\n  }\n\n  render(){\n    return (\n        <div className=\"post-nav hidden-xs side-outline hidden-sm\">\n          <div className=\"panel panel-default widget-outline\">\n            <div className=\"panel-heading\">文章目录</div>\n            <div className=\"panel-body\">\n              <div className=\"nav-body\">\n                <div className=\"highlight-title\"></div>\n                <ul className=\"articleIndex\">\n                 {this.props.dataSource.map( a => <li><a href='javascript:void(0)' \n                  onClick={this.props.toArticle.bind(this,a.link)}>{a.title}</a></li>)}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n  }\n}\n\nReact.render(<App />,document.getElementsByTagName('body')[0])\n\n```",
  "任何建议或者意见请联系作者 :) [yangggao@hotmail.com](Mailto:yangggao@hotmail.com)",
  "   ",
  ""
]