[
  "# 第一篇博客",
  "## 关于这篇博客的诞生",
  "-------",
  "2015年12月，才接触到React, 其实老早以前就看到相关的帖子，自己也曾去过React的首页去看官方文档。当时关于js 写 native APP 的帖子我都会点进去瞅瞅，React Native也是当时看到的，觉得很了不起，但是仔细想了之后，又发现存在一个问题，如果像我这样对Android一无所知的前端程序员，即使真的用官方Demo 运行起了 Android程序，如果程序异常，如何排查？哪怕最简单的错误。如果是对Android有过了解，写过原生App的程序来讲，同时兼具JS的功底，那么React应该确实是个不错的选择，毕竟人家脸谱网的程序都是全栈工程师。身兼多种学问。。",
  "",
  "后来项目说是要用React JS。没办法，只好看看，跟很多新人一样吧，带着Angular的经验去看React. 都会皱起眉头，这TM啥玩意儿啊。`JSX`?! ,什么鬼又是？为啥简单的前端现在变得好复杂？？",
  "",
  "俗话说，**将欲摧之，必先附之** 先学学它，再诋毁它~~~",
  "",
  "## 那么what's React?",
  "",
  "* React 是用来渲染View的。跟angular没有可比性，二者是不同的东西。不同职责。",
  "* 渲染View,没啥大不了，但是 React 通过 一个 内存Dom 来渲染，渲染前，先diff. 最小化渲染量",
  "* 将html与js组合在一起，整个组件更具封闭性。All is component! 整个页面就是不同组件组合在一起",
  "",
  "## 用 React 来生成博客",
  "",
  "熟悉用md写`文档` ，似乎同样可以用它来写`博客`。我们需要就是将原始的md文档转换成html。`md` 文档可以被解析为一行行特殊标签开始的文本。根据不同标签 render 文本成了 React 的工作。我们只需要写好 render 的逻辑即可。比如，`# `是 `<h1>` 标签。那么在 React 中就是：",
  "```render:function(){ \n\treturn (&lt;h1&gt;{文本}&lt;/h1&gt;)\n\t}\n```",
  "对于特殊的字符，比如 `code`, 通过正则匹配然后替换成`&lt;code&gt;文本&lt;/code&gt;`",
  "",
  "目前样式用 bootstrap。",
  "",
  "---------------------",
  "### 2016年春节前更新：",
  "之前博客的设计，是每一篇文章一个html与对应的数据js。这样设计好处是可以单独自定义某个博客的内容以及样式。但是有利同时也有弊，如果页面中有某个公共的元素，比如文章列表。那么每次都要重新编译一次所有的文章来更新文章列表（因为我们是静态blog,所以无法动态后台加载数据，数据都是通过编译塞到页面或者js中）。花了1天时间改成了单页面应用。博客的title,以及两侧列表内容作为页面的主体。中间内容则通过动态加载文章js来渲染。大体页面结构如下：",
  "```<div className=\"container mt50\">\n        <header className=\"header header--fixed hide-from-print animated\">\n          <div className=\"container\">\n            <nav className=\"nav-wrapper\">\n            </nav>\n            <a href=\"#\" className=\"brand header__link\">\n              <b className=\"brand__forename\">Bryan Yang</b><b className=\"brand__surname\">'s blog</b>\n            </a>\n          </div>\n        </header>\n            <div className=\"row\">\n                <div className=\"col-xs-12 col-md-9 main \">\n                    <Article lines={this.state.articleLines}  />\n                </div>\n                <div className=\"col-xs-12 col-md-3 side\">\n                  <Author/>\n                  <ArticleList dataSource={this.state.articleList} toArticle={this.fetchArticle.bind(this)}/>\n                </div>\n                  \n            </div>\n        </div>\n```",
  "如此，更加具有灵活性。整个博客成了一个页面，与n 多数据json。当点击文章列表。则加载相应的data.动态更新Article。",
  "-------",
  "### 用了2个多月的React. 略有一些感触，或许理解并不全面。",
  "目前在做的后台系统，是一个轻UI重交互的系统。页面form表单先对比较复杂。光一个页面的ajax接口就有10来个之多。繁多的数据验证，以及用户操作数据的暂时存储。用react 写了页面的一些控件，发现并不省代码。因为react是单向数据绑定。所以有一些 组件中的 handleChange有些多而且冗余。相比AngularJS 这是个劣势。另外在编写组件时候所费得脑力也较多，需要考虑state,props等要素。后来作的一个页面试着用vue去做。顿时感觉省时省力。",
  "如果现在让我选择技术方案。对于我们的这种后台重交互的系统，如果是单选的话，Angular（vue）是首选。如果可以多种叠加使用，那么Angular+react更好。对于整个页面，用Ng绑定data。页面中用到的公共组件。比如级联菜单，时间选择器等复用性高的插件。则考虑用react实现。以提高复用性。",
  "",
  "",
  "任何建议或者意见请联系作者 :) [yangggao@hotmail.com](Mailto:yangggao@hotmail.com)",
  "   ",
  ""
]