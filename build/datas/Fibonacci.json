[
  "## Fibonacci 生成器",
  "```//普通的 1,1,2,3,5,8...\nfunction fibonacci(n){\n    if(n==1) return 1;\n    if(n==2) return 1;\n    else return fibonacci(n-1)+fibonacci(n-2);\n}\n \n//yield生成器\nfunction fibonacci(){\n    let x=0,y=1;\n    while(true){\n        yield y;\n        [x,y]=[y,x+y];\n    }\n}\n \nf = fibonacci();\nfor(let i = 0; i< 10; i++) console.log(f.next());\nf.close() //释放\n \n//生成器是懒惰的，所以在某些时候性能更高。因为并不是立马运算，而是在需要是计算。\n \n/*下面是一个文本处理的例子*/\n//分隔成行，没有使用split,那样会每次处理整个字符串，并分配一个数组\nfunction eachline(s){\n    let p;\n    while((p = s.indexOf('\\n')) != -1){\n        yield s.substring(0,p);\n        s = s.substring(p+1);\n    }\n    if(s.length >0) yield s;\n}\n \nfunction map(lines,f){\n    for(let l in lines){\n        yield f(l);\n    }\n}\n \nfunction select(lines,f){\n    for(let l in lines){\n        if(f(l)){\n           yield l;\n        }\n    }\n}\n \n \nlet text= \"#comment \\n \\n hello \\n world\\n quit \\n\";\n//首先分隔成行\nlet lines = eachline(text);\n//去掉每行的首末空白\nlet trimmed = map(lines,function(l){\n    return l.trim();\n})\n//最后，忽略空行和注释\nlet nonblank = select(trimmed,function(l){\n    return l.length >0 && l[0] != \"#\"\n})\n \n//从管道中取出处理过的行 ,才开始真正的执行\nfor(let l in nonblank){\n    if(l === \"quit\") break;\n    console.log(l);\n}\n```"
]